services:
  frontend:
    build: ./frontend
    profiles: ["apps"]
    ports: 
      - '3000:3000'
    networks:
      - app-network
    depends_on:
      - api

  api:
    build: ../api
    profiles: ["apps"]
    environment:
      - DATABASE_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_URL=amqp://mq
    ports:
      - '8080:8080'
    depends_on:
      - db
      - mq
    networks:
      - app-network

  worker:
    build: ../worker
    profiles: ["apps"]
    environment:
      - RABBITMQ_URL=amqp://mq
    depends_on:
      - mq
    networks:
      - app-network

  db:
    image: postgres:17.0-alpine3.20
    profiles: ["services"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mq:
    image: rabbitmq:4.0.2-management-alpine
    profiles: ["services"]
    ports:
      - '15672:15672'
      - '5672:5672'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.1-alpine
    profiles: ["services"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:

networks:
  app-network:
    driver: bridge
